{"meta":{"title":null,"subtitle":null,"description":null,"author":"Lunker","url":"https://lunker.github.io"},"pages":[{"title":"about","date":"2017-12-29T07:46:39.000Z","updated":"2017-12-29T07:46:39.000Z","comments":true,"path":"about/index.html","permalink":"https://lunker.github.io/about/index.html","excerpt":"","text":""},{"title":"daily","date":"2017-12-29T07:51:56.000Z","updated":"2017-12-29T07:51:56.000Z","comments":true,"path":"daily/index.html","permalink":"https://lunker.github.io/daily/index.html","excerpt":"","text":""}],"posts":[{"title":"redis-performance-metrics","slug":"redis-performance-metrics","date":"2018-03-10T09:29:36.000Z","updated":"2018-03-10T09:42:20.000Z","comments":true,"path":"2018/03/10/redis-performance-metrics/","link":"","permalink":"https://lunker.github.io/2018/03/10/redis-performance-metrics/","excerpt":"","text":"What is Reids?Metric to alert on: Latencylatency는 client의 요청에서부터 서버의 실질적인 응답에 이르기까지 소요된 시간을 의미한다.Redis의 성능을 변화시킬 수 있는 가장 효과적인 방법이 latency를 관리하는 것이다.Single Thread로 동작하는 Redis로 인해 latency의 분산은 심각한 bottleneck을 야기한다.(—-)1 request에 대해 긴 시간을 소비하는 response는 다른 subsequent request들의 latency를 증가시킨다.","categories":[],"tags":[]},{"title":"tg-memo","slug":"tg-memo","date":"2018-01-08T11:49:40.000Z","updated":"2018-01-22T03:49:30.000Z","comments":true,"path":"2018/01/08/tg-memo/","link":"","permalink":"https://lunker.github.io/2018/01/08/tg-memo/","excerpt":"","text":"Post 예정 spring boot, spring slf4j - log4j2 연동 spring boot, react 프로젝트 구축하기 spring boot hot deploy spring boot with webpack, webpack-dev-server swagger 적용 spring security 적용","categories":[{"name":"ToyGround","slug":"ToyGround","permalink":"https://lunker.github.io/categories/ToyGround/"}],"tags":[]},{"title":"2018-plan","slug":"2018-plan","date":"2018-01-08T01:38:55.000Z","updated":"2018-01-08T01:46:22.000Z","comments":true,"path":"2018/01/08/2018-plan/","link":"","permalink":"https://lunker.github.io/2018/01/08/2018-plan/","excerpt":"","text":"새해가 밝았다.그동안에 조금씩이나마 공부를 하긴 헀지만 새로운 지식 보다는 기존의 지식으로 먹고 살아온거 같다.멍청해져감과 게을러져감이 스스로 느껴지기에 다시금 마음을 다잡고 발전하는 한해를 보내려고 한다. Toy project Algorithm Study ? Book","categories":[{"name":"Daily","slug":"Daily","permalink":"https://lunker.github.io/categories/Daily/"}],"tags":[]},{"title":"대기업, 게임 회사, 그리고 스타트업에서 1년을 보내기까지","slug":"remembrance","date":"2017-12-31T08:46:53.000Z","updated":"2018-01-16T02:45:19.000Z","comments":true,"path":"2017/12/31/remembrance/","link":"","permalink":"https://lunker.github.io/2017/12/31/remembrance/","excerpt":"","text":"올해로 3년차 개발자이다.하지만 자랑은 아니지만 3년차 경력치고 쓸데없이 다채롭다. 대기업 7개월게임회사 6개월스타트업 1년 그간 코딱지만큼 일하면서 느낀점과지나온 시간동안 결정을 내리기 위한 고민, 이유 등을 잊지 않기위해 2017년을 마무리하며 정리해본다.(역시나 게으름을 이기지 못하고 연말에 시작한 회고를 18년 초까지 끌고 있다…) 2015년2015년 하반기에 대학교 졸업과 동시에 개발자로서 일을 시작하기 시작했다.첫 사회생활을 운이 좋게도 큰 회사에서 시작하게 됐다. 개발자도 남의 돈 받아가며 일하는 직장인이다멋드러지게 일하고 그런거 없더라.회사 다니고 별다를거 없더라.비즈니스 매너 등 많이 배웠다. 운영 vs 개발규모가 있는 회사여서 개발팀과 운영팀이 분리되어 있었다.사실 외부 SI에서 개발한 프로덕트들을 받아서 운영했기에 내부 개발팀과는 크게 상관이 없는 구조였다.그래서 운영팀은 운영만(소소한 개선건들이 있긴 하지만 운영이라고 봄) 하는 상황이었다. 부들부들운영팀으로 들어오는 그나마 있는 개선건들도 레거시를 건드리고 싶지 않은 분들로 인해 그 마저도 개발하기 쉽지 않았다.직접 개발한 어플리케이션이 아니고, 장애가 발생할 수 있으니 그러는 마음은 이제 이해한다.또한, 큰 틀에서의 개선을 할 수 없기에 임시 방편에 불과했다. ‘이게 정말 개선인가..’ 그래서 퇴사했다.안좋은 얘기뿐이지만 모든 대기업, 나아가서 벤처가 아닌 곳들이 이렇다는 것이 아니다. 전체적으로 보면 ‘어떤 환경에서’, ‘어떻게 일을 하고 싶은지’를 느낀 시간들이었다. 2016년신입 공채가 끝난 시점에 퇴사를 하게 되어, 몇개월 정도 공백기가 생겼다.취업준비를 다시 시작하면서 정말 많은 고민들을 하였다. 왜 스타트업인가?새로운 것을 써보고 싶다고 말을 하고 싶었고장애가 나길 두려워해서 덮어두기 보다는 개선하고 싶었고하루 업무시간 중에서 개발하는 시간이 많았으면 했고경력이 늘어날때 배만 늘어나는게 아니라 경험과 기술도 늘었으면 했고공부하고 연습하는 것도 좋지만, 빠른 시일내에 일을 하고 싶었다.내가 작성하고 개발한 기능이 내 랩탑과 깃헙에 머물러 있는게 아니라 다른 누군가가 사용해서 보람을 느끼고 싶었다. 어차피 Java, Spring 아닌가?이당시만 하더라도 기술을 굉장히 고집하였다. 우리나라에서 많이 쓰이는 기술스택은 비슷비슷하다고 본다.Java계열, Python 계열 ‘어차피 비슷한 웹 서버, 어플리케이션 서버를 만들거면 거기에 담기는 비즈니스로직이라도 특이한 업종의 일을 해보자.’(그래서 지금 통신에 발을 들여 놓았습니다…)라고 생각을 하게 됐다. _ 2017년쉽진 않았으나 생각보다 빠르게 퇴사 후 1달여만에 이직을 하게 되었다. 1년동안 회사 내부적으로 많은 우여곡절이 있었다.웃기긴하지만 올해로 3년차에 접어들지만 가장 회사를 오래 다닌 기간이 딱 1년이다. (현재 진행중…) 1년동안 일을 하면서 느낀점과, 반성할 부분을 적어본다. 충분히 고민하고 충분히 시도해보기어느 분야나 마찬가지겠지만 통신업을 하다보니 구글에 뒤져도 명쾌한 답이 나와 있는 경우가 드물었다.그러다보니 맨땅의 헤딩을 정말 많이했다. 회사 내에는 나보다 실력있고 잘하는 사람들이 많다.일을 하다보면 난관에 부딪히기도 하고 모르는 것들도 생기게 마련이다.그렇다보면 자연스레 구글(스택오버플로우..ㅋ)을 뒤져보기도 하고 주변 사람들에게 물어보기도 한다. 질문을 하는건 ‘내가 정말 충분히 고민했는가?’‘내가 해볼 수 있는 방법들을 충분히 해보았는가?’ 질문을 하는것을 지양하라는 것이 아니다.질문 하는 사람의 기본자세를 되돌아 보게 됐다. 덤으로StackOverFlow를 너무 맹신하지 말며RFC, 라이브러리 docs 등을 활용하는것이 고생을 덜한다. 자유로운 분위기 속에서도 책임을 보통 스타트업들이 가지는 공통적인 부분은 ‘자유로운 분위기’, ‘자율’ 이라 생각한다. 스타트업 또한 사람들이 모여서 함께 일하는 곳이기 때문에 당연히 상식이 통하는 곳이다.개발 기한이나, 맡은 업무의 중요성을 깨닫고 그에 맞게 행동하는 것이 중요하다. 커뮤니케이션은 간결하고 명확하게언제나 이직할 준비를 해두어라별 이유는 없고..사람이기에 한 조직에 있다보면 적응이 되어 나태해 질 수도 있고 반대로 너무나 바빠서 그럴 여유조차 없을 수 있다.어떤 이유건 그럴수록 자기자신을 되돌아보는 시간이 필요하다. 내가 그동안 해온것들,지금 여기에서 하고 있는 것들,그리고 앞으로 남은 시간동안 하고 싶은것들현재의 내 일과 생활이 만족스러운가 등등등 충분히 생각해 볼 필요가 있다. 그래서 이를 실천하기 위한 방법으로 이직 준비를 하는것이다.( == 업무를 정리하는 것) 이직시기에 한번에 정리하는게 아니라, 크고 작은 일을 하고 마치고서 정리하는 것이다.정리를 하다보면 그 중에 한번이라도 나를 되돌아보는 시간을 가질 수 있다..(물론 나중에 이직할 때도 몹시 편하다.) 기술은 기술일 뿐위에서도 잠깐 얘기했지만, 예전에는 새로운 기술에 굉장히 집착을 했다.‘오 뭐가 나왔대’‘이번에 NoSQL이란게 말이지’ 일하면서 느낀건기술이 필요할 때 빠르게 배우는 능력인거 같다. 언제나 예상치 못한 상황이 벌어지기 마련이다.그럼에도 개발은 마쳐야 하고, 할줄 아는 사람은 없다면 결국엔 내가 배워서 해야한다. 물론 이럴때에 평소에 공부하고 사용해오던 기술이 있다면 감사하겠지만 그런 일은 나에게 일어나지 않기에.. 평소에 문서를 찾아 읽고, 시도해보고, 많은 삽질을 거치면 어느정도 배움의 속도가 빨라지는거 같다.이런 일이 많으면 안되겠지만 상황불문하고 배움이 빠른것은 좋은거 같다. 충분한 대우를 받을 것스타트업에서는 한명 한명의 몫이 2018년이 글을 작성하는 지금 나는 현재 나의 모습에 몹시 불만족스럽다.그래서 이 글을 작성하게 되었고, 작성하면서도 더더욱 불만족스럽다.회고를 하며 언제쯤 만족하는 날이 올까 궁금하지만 가고 싶은 길을 가기 위해서는정말 가고 싶지 않은 길에서 뛰쳐나와야 한다. 2018년에는 어디서 무엇을 배우고 어떤 삽질을 하고 있을지 모른다.다음 회고때 지금보다 조금이라도 더 배우고 성장하길 바랄뿐이다. 1var a= &quot;asdf&quot;;","categories":[{"name":"Daily","slug":"Daily","permalink":"https://lunker.github.io/categories/Daily/"}],"tags":[{"name":"회고","slug":"회고","permalink":"https://lunker.github.io/tags/회고/"}]}]}